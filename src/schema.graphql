# import * from './users/users.types.graphql'
# import * from './messages/messages.types.graphql'
# import * from './conversations/conversations.types.graphql'
# import * from './shared.graphql'

type Mutation {
  #  Create a Conversation. Use some of the cooked in template functions for UUID and DateTime.
  createConversation(createdAt: String, id: ID!, name: String!): Conversation
  #  Create a message in a Conversation.
  createMessage(content: String, conversationId: ID!, createdAt: String!, id: ID!): Message
  #  Put a single value of type 'User'. If an item does not exist with the same key the item will be created. If there exists an item at that key already, it will be updated.
  createUser(username: String!): User
  #  Put a single value of type 'UserConversations'. If an item does not exist with the same key the item will be created. If there exists an item at that key already, it will be updated.
  createUserConversations(conversationId: ID!, userId: ID!): UserConversations
}

type Query {
  #  Scan through all values of type 'Message'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'MessageConnection' result to fetch pages.
  allMessage(after: String, conversationId: ID!, first: Int): [Message]
  #  Scan through all values of type 'MessageConnection'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'MessageConnectionConnection' result to fetch pages.
  allMessageConnection(after: String, conversationId: ID!, first: Int): MessageConnection
  allMessageFrom(after: String, conversationId: ID!, first: Int, sender: String!): [Message]
  #  Scan through all values of type 'User'. Use the 'after' and 'before' arguments with the 'nextToken' returned by the 'UserConnection' result to fetch pages.
  allUser(after: String, first: Int): [User]
  #  Get my user.
  me: User
}

type Subscription {
  #  Subscribes to all new messages in a given Conversation.
  subscribeToNewMessage(conversationId: ID!): Message

  # User connection
  subscribeToNewUCs(userId:ID!): userConversations

  # New users you know
  subscribeToNewUsers: User
}